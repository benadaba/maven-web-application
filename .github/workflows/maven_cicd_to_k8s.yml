name: Maven CI Pipeline unto K8s

on:
  push:
    branches:
      - main
      - main1
      - master1

  pull_request:
      branches:
        - main

  workflow_dispatch:
    inputs:
      deploy_app:
        description: "Do you want to deploy the app to k8s?"
        required: true
        default: "nope"
        type: choice
        options:
          - deploy
          - nope
      build_docker:
        description: "Do you want to build docker image?"
        required: true
        default: "no"
        type: choice
        options:
          - yes
          - no
      create_k8s_cluster:
        description: "Choose whether or not you want to create a k8s"
        required: true
        default: "delete"
        type: choice
        options:
          - create
          - delete
          - both
          - nothing

jobs:
  manual-approval1:
    runs-on: ubuntu-latest
    steps:
      - name: Waiting for manual approval
        uses: actions/github-script@v3
        with:
          script: |
            const { Octokit } = require("@octokit/core");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = context.payload.pull_request.number;
            const approval = await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              owner,
              repo,
              issue_number,
              body: 'Please approve this workflow to proceed with the deployment.'
            });
            console.log(approval);
            
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Set up JDK 11 (or whichever version you need)
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    # Cache Maven dependencies to speed up builds
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven

    # Build and run tests with Maven
    - name: Build and test with Maven
      run: mvn clean install

    # SonarQube analysis with remote server authentication
    - name: SonarQube Scan
      run: mvn sonar:sonar -Dsonar.host.url=http://3.8.211.24:9000 -Dsonar.login=${{ secrets.SONAR_USERNAME }} -Dsonar.password=${{ secrets.SONAR_PASSWORD }}
    
    - name: Configure Maven settings for nexus
      run: |
        mkdir -p ~/.m2
        echo "<settings>\
        <servers>\
            <server>\
                <id>nexus</id>\
                <username>${{ secrets.NEXUS_USERNAME }}</username>\
                <password>${{ secrets.NEXUS_PASSWORD }}</password>\
            </server>\
        </servers>\
        </settings>" > ~/.m2/settings.xml    

        
    - name: Upload to Nexus
      run: mvn deploy
      env:
        MAVEN_USERNAME: ${{ secrets.NEXUS_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    # Step 1: Install SSH client (optional, most runners have it by default)
    - name: Install SSH
      run: sudo apt-get install -y ssh

    # Step 2: Add SSH key
    - name: Add SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    # Step 3: Copy file from runner to EC2 instance
    - name: Copy file to EC2
      run: |
        scp -o StrictHostKeyChecking=no target/*.war ec2-user@172.31.0.125:/opt/tomcat9/webapps


    - name: Deploy to Tomcat
      run: |
        curl -T target/*.war "http://${{ secrets.TOMCAT_HOSTNAME }}/manager/text/deploy?path=/maven-app&update=true"
      env:
        TOMCAT_USERNAME: ${{ secrets.TOMCAT_USERNAME }}
        TOMCAT_PASSWORD: ${{ secrets.TOMCAT_PASSWORD }}


  build-run-docker-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
  
      - name: Log in to Docker Hub
        if: ${{ github.event.inputs.build_docker == 'yes' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      - name: Build and push docker image
        if: ${{ github.event.inputs.build_docker == 'yes' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/maven-cicd:k8s
  
      - name: Set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
  
      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin/
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
  
      - name: Install eksctl
        if: ${{ github.event.inputs.create_k8s_cluster == 'create' }}
        run: |
          chmod +x eks-install.sh
          ./eks-install.sh
  
      - name: Export kubeconfig
        if: ${{ github.event.inputs.create_k8s_cluster == 'create' }}
        run: |
          export KUBECONFIG=$HOME/.kube/config
  
      - name: Set up Kubeconfig
        if: ${{ github.event.inputs.create_k8s_cluster == 'nothing' }}
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
  
  manual-approval:
    runs-on: ubuntu-latest
    needs: build-run-docker-image
    steps:
      - name: Waiting for manual approval
        uses: actions/github-script@v3
        with:
          script: |
            const { Octokit } = require("@octokit/core");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = context.payload.pull_request.number;
            const approval = await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              owner,
              repo,
              issue_number,
              body: 'Please approve this workflow to proceed with the deployment.'
            });
            console.log(approval);
  
  deploy:
    runs-on: ubuntu-latest
    needs: manual-approval
    steps:
      - name: Deploy App to EKS cluster
        if: ${{ github.event.inputs.deploy_app == 'deploy' }}
        run: |
          echo "Deploying toystore app to EKS Cluster ..."
          kubectl apply -f deployment.yml
          kubectl apply -f service.yml
  
      - name: Delete cluster
        if: ${{ github.event.inputs.create_k8s_cluster == 'delete' }}
        run: |
          echo "Deleting EKS Cluster ..."
          eksctl delete cluster ghaClusterAutomated --region eu-west-2
