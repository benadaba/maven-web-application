pipeline{
     agent any
     
      tools {
       maven "maven394"
    //   def mavenHome = tool name: "maven394"
     }
      environment {
        TOMCAT_CREDENTIALS = 'tomcat-cred'  // Jenkins credentials ID for Tomcat
        TOMCAT_URL = 'http://13.42.18.174:8080/'  // URL of the Tomcat server
        WAR_FILE = 'target/*.war'  // The path to the WAR file after the build
        
        AWS_REGION = 'eu-west-2'  // e.g., us-west-2
        EKS_CLUSTER_NAME = 'eks-demo'  // Name of your EKS cluster
        DOCKER_IMAGE = 'datapandassandbox/maven-web-app-jenkins-cicd'  // Docker image name
        DOCKER_CREDENTIALS = 'docker-hub-credentials-id'  // Jenkins credentials ID for Docker Hub (or ECR if using)
        AWS_CREDENTIALS = 'aws-credentials-id'  // Jenkins credentials ID for AWS access
        KUBERNETES_NAMESPACE = 'default'  // Kubernetes namespace to deploy to
        DEPLOYMENT_NAME = 'maven-cicd-deployment'  // Kubernetes deployment name
        CONTAINER_NAME = 'maven-cicd-container'  // Name of the container in the Kubernetes deployment
        SERVICE_NAME = 'maven-cicd-service'  // Kubernetes service name
        WAR_FILE_PATH = '/barclays-app'  // The WAR file context path
        
        CLUSTER_NAME = 'eks-demo'  // EKS cluster name
        ACTION = 'install'  // Either 'install' or 'delete' depending on what you want to do
    }

    
     stages{
           stage("1GetCode"){
                  steps{
                    git branch: 'main', url: 'https://github.com/benadaba/maven-web-application.git'
                  }
           }
           
           
            stage("2CleanTargetDirectory"){
             steps{
                sh "mvn clean"
             }
         
            }
            
            stage("3UnitTest"){
                  steps{
                    sh "mvn test"
                  }
            }
       
           stage("4BuildThePackage"){
              steps{
                sh "mvn package"
              }
           }
           
            stage("5CodeQualityAnalysis"){
              steps{
                sh "mvn sonar:sonar"
              }
            }
            
            stage("6UploadArtifactsBackUp"){
              steps{
                sh "mvn deploy"
              }
           }
           
             stage('7DeployToUAT_TomcatServer') {
            steps {
                // Deploy WAR file to Tomcat server
                deploy adapters: [tomcat9(credentialsId: "${TOMCAT_CREDENTIALS}", 
                                          path: '', 
                                          url: "${TOMCAT_URL}")], 
                       contextPath: null, 
                       war: "${WAR_FILE}"
            }
        }
        
         stage("8.ApprovalGate"){
         steps{
          timeout(time:1, unit:'MINUTES'){
            input message: "Please review the application and give us your feedback before we take the next action"
          }
          }
        }
        
          stage('9DeploytoPROD_Tomcat') {
            steps {
                // Deploy WAR file to Tomcat server
                deploy adapters: [tomcat9(credentialsId: "${TOMCAT_CREDENTIALS}", 
                                          path: '', 
                                          url: "${TOMCAT_URL}")], 
                       contextPath: null, 
                       war: "${WAR_FILE}"
            }
        }
        
      
       stage("8SendNotification"){
              steps{
                sh """
                echo "i am sending notifiaction"
                
                """
              }
           }
           
          
            stage('9.Install Docker') {
            steps {
                sh '''
                 sudo yum install -y yum-utils
                    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo -y
                    sudo yum install docker-ce docker-ce-cli containerd.io -y 
                    sudo systemctl enable docker
                    sudo systemctl start docker
                    sudo usermod -aG docker jenkins
                    sudo systemctl restart docker
                '''
            }
        }
          
           stage('10.Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}")
                }
            }
        }
        
        stage('11.Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS) {
                        docker.image("${DOCKER_IMAGE}:${env.BUILD_NUMBER}").push()
                    }
                }
            }
        }
    
    
          stage('12.Install AWS CLI') {
            steps {
                sh '''
                # Install AWS CLI Version 2
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install --update
                '''
            }
        }
        
        
         stage('13.Install or Update kubectl') {
            steps {
                script {
                    // Check if kubectl is installed
                    def kubectlInstalled = sh(script: 'which kubectl', returnStatus: true) == 0

                    if (kubectlInstalled) {
                        echo 'kubectl is already installed, updating it...'
                        sh '''
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        sudo mv kubectl /usr/local/bin/kubectl
                        '''
                    } else {
                        echo 'kubectl is not installed, installing it...'
                        sh '''
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        sudo mv kubectl /usr/local/bin/kubectl
                        '''
                    }
                }
            }
        }
        
          stage('14.Install eksctl') {
            steps {
                script {
                    // Install eksctl if not already installed
                    def eksctlInstalled = sh(script: 'which eksctl', returnStatus: true) == 0

                    if (!eksctlInstalled) {
                        echo 'Installing eksctl...'
                        sh '''
                        # Get the latest eksctl version from GitHub API
                        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                        sudo mv /tmp/eksctl /usr/local/bin/
                        '''
                    } else {
                        echo 'eksctl is already installed.'
                    }
                }
            }
        }
          
           stage('15.Prepare eks-install.sh') {
            steps {
                script {
                    // Create the eks-install.sh script
                    writeFile file: 'eks-install.sh', text: '''#!/bin/bash
                    CLUSTER_NAME="eks-demo"
                    AWS_REGION="eu-west-2"

                    install_cluster() {
                        echo "Checking if EKS cluster: ${CLUSTER_NAME} already exists in region: ${AWS_REGION}"

                        eksctl get cluster --name ${CLUSTER_NAME} --region ${AWS_REGION} > /dev/null 2>&1

                        if [ $? -eq 0 ]; then
                            echo "EKS cluster ${CLUSTER_NAME} already exists. Skipping creation."
                        else
                            echo "EKS cluster ${CLUSTER_NAME} does not exist. Proceeding with creation."
                            
                            eksctl create cluster \
                                --name ${CLUSTER_NAME} \
                                --region ${AWS_REGION} \
                                --nodegroup-name standard-workers \
                                --node-type t3.medium \
                                --nodes 2 \
                                --nodes-min 1 \
                                --nodes-max 3 \
                                --managed
                            
                            if [ $? -eq 0 ]; then
                                echo "EKS cluster ${CLUSTER_NAME} created successfully."
                            else
                                echo "Failed to create EKS cluster ${CLUSTER_NAME}."
                                exit 1
                            fi
                        fi
                    }

                    delete_cluster() {
                        echo "Deleting EKS cluster: ${CLUSTER_NAME} in region: ${AWS_REGION}"

                        eksctl delete cluster --name ${CLUSTER_NAME} --region ${AWS_REGION}

                        if [ $? -eq 0 ]; then
                            echo "EKS cluster ${CLUSTER_NAME} deleted successfully."
                        else
                            echo "Failed to delete EKS cluster ${CLUSTER_NAME}."
                            exit 1
                        fi
                    }

                    if [ "$1" == "install" ]; then
                        install_cluster
                    elif [ "$1" == "delete" ]; then
                        delete_cluster
                    else
                        echo "Invalid option. Use 'install' to create the cluster or 'delete' to remove it."
                        exit 1
                    fi
                    '''

                    // Ensure the script is executable
                    sh 'chmod +x eks-install.sh'
                }
            }
        }
        stage('16.Run eks-install.sh') {
            steps {
                withAWS(credentials: AWS_CREDENTIALS, region: AWS_REGION) {
                    script {
                        // Run the eks-install.sh script with the appropriate action (install or delete)
                        sh "./eks-install.sh ${ACTION}"
                    }
                }
            }
        }
         stage('17.Configure AWS and kubectl') {
            steps {
                withAWS(credentials: AWS_CREDENTIALS, region: AWS_REGION) {
                    script {
                        // Configure kubectl to interact with the EKS cluster
                        sh """
                        aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION} 
                        """
                    }
                }
            }
        }
        
         stage('18.Initial Deployment') {
            steps {
                  withAWS(credentials: AWS_CREDENTIALS, region: AWS_REGION) {
                script {
                    // Check if deployment exists, and if not, create it
                    def deploymentExists = sh(script: "kubectl get deployment ${DEPLOYMENT_NAME} --namespace=${KUBERNETES_NAMESPACE} --validate=false", returnStatus: true) == 0
                    
                    if (!deploymentExists) {
                        echo "Performing initial deployment as the deployment does not exist."
                        
                        // Apply the Kubernetes manifest for the initial deployment
                        sh """
                        kubectl apply -f deployment.yaml --namespace=${KUBERNETES_NAMESPACE} --validate=false
                        """
                    } else {
                        echo "Deployment already exists."
                    }
                }
                  }
            }
        }

        stage('19.Update Deployment') {
            
            steps {
                  withAWS(credentials: AWS_CREDENTIALS, region: AWS_REGION) {
                script {
                    // Update the deployment image if the deployment already exists
                    //kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${DOCKER_IMAGE}:${env.BUILD_NUMBER} --namespace=${KUBERNETES_NAMESPACE}
                    sh """
                     kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${DOCKER_IMAGE}:${env.BUILD_NUMBER} --namespace=${KUBERNETES_NAMESPACE}
                    """
                }
            }
            }
        }
        
        stage('20.Retrieve LoadBalancer URL') {
            steps {
                withAWS(credentials: AWS_CREDENTIALS, region: AWS_REGION) {
                script {
                    // Get LoadBalancer URL (try for hostname first, fallback to IP)
                    def loadBalancerUrl = sh(script: "kubectl get svc ${SERVICE_NAME} --namespace=${KUBERNETES_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'", returnStdout: true).trim()

                    if (!loadBalancerUrl) {
                        loadBalancerUrl = sh(script: "kubectl get svc ${SERVICE_NAME} --namespace=${KUBERNETES_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'", returnStdout: true).trim()
                    }

                    if (!loadBalancerUrl) {
                        error("Failed to retrieve LoadBalancer URL or IP.")
                    }

                    // Print the full URL with the WAR file context path
                    def fullAppUrl = "http://${loadBalancerUrl}${WAR_FILE_PATH}"
                    echo "Application deployed at: ${fullAppUrl}"
                }
            }
        }
        
        }
    
        
     }
     
     
     
     
     post{
     
        always {
            echo 'Cleaning up workspace...'
            cleanWs()  // Clean the workspace after job
        }

        success {
            echo 'Deployment successful!'
        }

        failure {
            echo 'Deployment failed!'
        }
     } 
}
